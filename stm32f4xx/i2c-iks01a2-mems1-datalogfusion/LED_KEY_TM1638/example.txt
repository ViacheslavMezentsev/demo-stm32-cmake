/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
	
	
//---------------------------------------
  настройки в CubeMX:
  
  включаем SPI в режиме полудуплексный ( Half-Duplex Master )( по одному проводу и прием и передача )
  меняем порядок бит отправки FirstBits -> LSB First
  мкорость ставим небольшую не более 1МБит/с
  ставим CPOL -> High 
  ставимCPHA -> 2 Edge
  
  //---------------------------------------
  
  распиновка и подключение:
  
  интерфейс: полудуплексный SPI. ( Half-Duplex Master ) ( по одному проводу и прием и передача )
  
  VCC	-	+5V ( разбег не более 10% )
  GND	-	GND
  STB	-	chip select ( выбор устройства )
  CLK	-	clock ( линия тактирования ) SCK
  DIO	-	data in/out (вход и выход ) MOSI
  
  описание принципа работы модуля:
  Данная микросхема это контроллер семисегментного дисплея (максимум 10 знакомест) и клавиутуры (максимум 8х3),
  микросхема имеет внутренню память на 16 байт. 
  Каждый байт отвечает за отображение одного символа или светодиода (зависит от разводки платы).
  В моем случае, 8 не четных байт отвечали за цифры на LED-дисплеях. 
  А младший бит каждого четного байта отвечал за 8 светодиодов. 
  + есть доспутный для чтения 32-битный регистр, в котором храниться состояние кнопок. 
  + есть байт настроек.
  
  Управляется микросхема довольно легко. Есть всего три типа команд:
	команды управления 	0х8Х
	команды данных 		0х4Х
	команды адреса 		0хСХ
	

  Управлять тут можно целыми двумя параметрами: яркостью и включением отображения. 
  Для этого используется младшая половина байта. 
  Первые  три отведены на яркость и четвертый на управление включением. 
  Соответственно, у яркости 8 градаций. 
  Для включения микросхемы необходимо отправить любую из следующих команд:
	0x88 	Отображение ВКЛ, ширина шим яркости 1/16
	0x89 	Отображение ВКЛ, ширина шим яркости 2/16
	0x8A	Отображение ВКЛ, ширина шим яркости 4/16
	0x8B	Отображение ВКЛ, ширина шим яркости 10/16 
	0x8C	Отображение ВКЛ, ширина шим яркости 11/16
	0x8D	Отображение ВКЛ, ширина шим яркости 12/16
	0x8E	Отображение ВКЛ, ширина шим яркости 13/16
	0x8F	Отображение ВКЛ, ширина шим яркости 14/16
  Для отключения достаточно послать любую из вышеперечисленных команд с обнуленным 3 битом.
	
  После включения можно отправлять и читать данные в/из регистры микросхемы. 
  Для выбора необходимого действия с регистрами служит команда 0x4X; 
  Как и в предыдущей команде, за все отвечает младшая половина байта, а именно 1 и 2 биты.
	1-й бит: 1 - чтение /  0 - запись
	2-й бит: 1 - фиксированный адрес /  0 - автоинкремент адреса

	0x40	Запись, автоинкремент адреса
	0x44	Запись, фиксированный адрес
	0x42	Чтение

	Запись в микросхему возможна в режиме:
	1) фиксированного адреса (команда 0x44): каждый раз сначала передается адрес ячейки памяти, потом байт данных
	2) автоувеличения адреса (команда 0x40): каждый раз сначала передается адрес ячейки памяти, потом несколько байт данных (до 16-ти). Каждый следующий байт пишется в следующую ячейку.

	Управление включением-выключеним и яркостью задается командой: 0x80 с параметрами — битами:
	1) Влючение выключание задается установкой/сбросом 3-го бита.
	2) Яркость задается от 0 до 7 — 3-мя младшими битами.

	Запись в микросхему состоит из минимум 2-х байт:
	1) Задает адрес записи (или начала записи, если задан режим автоувеличения адреса): 0xC0 + адрес 0-15.
	чтобы удобнее было двигаться от 0 до 16 в одном случае нам нужны четные а в другом нечетные
	поетому для светодиодов начальный адрес будет 0xC1 ( 0xC0 + 1 сдвиг на 1 разряд ) а для семисегментных индикаторов 0xC0
	2) Собственно байт данных.

	Чтение клавиатуры состоит из 2-х этапов:
	1) Отправки команды чтения клавиатуры: 0x42.
	2) Чтения 32 бит данных.
	
	
*/

в файле LED_KEY_TM1638.h указываем установленые значения ( настройки )

//##########  SETUP  ######################################################################################################################################

		//==== указываем порт SPI====================================================

		#define 	TM1638_SPI_HAL 		hspi1
			
		//============================================================================
		
		//=== указываем порты ( если в кубе назвали их STB то тогда нечего указывать не нужно )
		#if defined (STB_GPIO_Port)
		#else
			#define STB_GPIO_Port		GPIOA
			#define STB_Pin				GPIO_PIN_11
		#endif
		//=============================================================================

		
//##########################################################################################################################	




	#include "LED_KEY_TM1638.h"
	
	// переменная для хранения данных с кнопки ( бит соответствует нажатой клавише )
	uint8_t keyPressed;	
	
	
	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	
	//--------------------------------------------------
	// инициализация дисплея
	// яркость подсветки от 0 до 7 ( светодиодов и цифр )
	TM1638_init( 0 );
	//--------------------------------------------------
	
	// очищаем ( выключаем все семисегментные индикаторы )-------------
	//TM1638_Clear_SevenSegment();
	//----------------------------------------------------------------
	
	// очищаем ( выключаем все светодиоды )-------------
	//TM1638_Clear_Led();
	//--------------------------------------------------
	
	// ощищаем все полностью и светодиоды и семисегментные индикаторы---
	TM1638_Clear_All();
	//--------------------------------------------------
	
	HAL_Delay (500);
	
	//--------------------------------------------------
	// включаем по очереди все светодиоды
	for( uint8_t i = 1; i <= 8; i++){
		
		// включение и выключение светодиодов
		// первый - номер светодиода от 1 до 8
		// второй - состояние LED_OFF или LED_ON
		TM1638_Led_OnOff( i, LED_ON );
		
		HAL_Delay (200);
	}
	//---------------------------------------------------
	
	
	//--------------------------------------------------
	// выключаем по очереди все светодиоды
	for( uint8_t i = 1; i <= 8; i++){
		
		// включение и выключение светодиодов
		// первый - номер светодиода от 1 до 8
		// второй - состояние LED_OFF или LED_ON
		TM1638_Led_OnOff( i, LED_OFF );
		
		HAL_Delay (200);
	}
	//---------------------------------------------------
	
	
	//---------------------------------------------------
	// функция формирует одно разрядное число ( 1 цифру )
	// в указаном разряде ( можно совместно включить точку )
	// 1- позиция ( разряд ) где отабразить значение от 1 до 8
	// 2- сама цифра от 0 до 9 ( если нужен знак минус то ставим 11 )
	// 3- точка ( 1 включить,  0 выключить )
	TM1638_sendOneDigit(1, 8, 0);
	//--------------------------------------------------
	
	
	HAL_Delay (2000);
	// очищаем ( выключаем все семисегментные индикаторы )
	TM1638_Clear_SevenSegment();
	
	//----------------------------------------------------
	// функция для отображения любого числа на дисплее
	// строка которую нужно отабразить :
	// символы цифры от 0 до 9 
	// знак минус ( может быть не один )
	// знак точка ( может быть не один )
	// Напримар: "-10.56" "0.56" "-2 -2.3" "1.2.3.4." "-23-" и т.д
	TM1638_sendNumber("-2435.67");
	//----------------------------------------------------
	
	
	HAL_Delay (2000);
	// очищаем ( выключаем все семисегментные индикаторы )
	TM1638_Clear_SevenSegment();
	
	
	// в цикле выводим числа от 0 до 9
	for( int32_t i = 0; i < 10; i++ ){
		
		TM1638_Led_OnOff( 1, LED_ON );
		
		// очищаем ( выключаем все семисегментные индикаторы )
		TM1638_Clear_SevenSegment();
		
		//--------------------------------------------------------------------
		// функция для отображения INT целочисленного числа на дисплее
		// число целочисленное :
		// цифры от -999 9999 до 9999 9999 
		TM1638_sendNumberInt( i );
		//--------------------------------------------------------------------
		
		HAL_Delay (500);
		
		TM1638_Led_OnOff( 1, LED_OFF );
		
		HAL_Delay (500);
		
	}

	HAL_Delay (2000);
	// очищаем ( выключаем все семисегментные индикаторы )
	TM1638_Clear_SevenSegment();
	
	//////////////////////////////////////////////////////////////////////////////////////////////////

while(1)===========================================================================================================================
	
	////////////////////////////////////////////////////////////////////////////////////////
	
	  
	  
	//--  включаем светодиод по номеру нажатой кнопки ------------------------------------
	// постоянно считываем состояние кнопок
	// ( бит соответствует нажатой клавише )
	keyPressed = TM1638_readKey();
	
	// переменная которой будем маской проверять биты
	uint8_t num_key = 1;
	
	// в цикле обходим все 8 кнопок и если кнопка нажата то 
	// включаем соответствующий светодиод, иначе его выключаем
	for( uint8_t i = 1; i <= 8; i++){
		
		if( keyPressed & num_key ){
			TM1638_Led_OnOff( i, LED_ON );
		}
		else{
			TM1638_Led_OnOff( i, LED_OFF );
		}
		
		// сдвигаем на следующий разряд
		num_key = num_key << 1;
	}
	//-------------------------------------------------------------------------------------
	
	// паралельно выводим на екран кол-во секунд со старта микроконтроллера
	
	// очищаем ( выключаем все семисегментные индикаторы )
	//TM1638_Clear_SevenSegment();
	
	//--------------------------------------------------------------------
	// функция для отображения INT целочисленного числа на дисплее
	// число целочисленное :
	// цифры от -999 9999 до 9999 9999 
	TM1638_sendNumberInt( HAL_GetTick() / 1000 );
	//--------------------------------------------------------------------

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	
	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
